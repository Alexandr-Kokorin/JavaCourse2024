/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.jooq.generated.tables.records;

import edu.java.scrapper.domain.jooq.generated.tables.Chat;
import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChatRecord extends UpdatableRecordImpl<ChatRecord> implements Record4<Long, String, String, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>CHAT.ID</code>.
     */
    public void setId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>CHAT.ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>CHAT.NAME</code>.
     */
    public void setName(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>CHAT.NAME</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>CHAT.STATE</code>.
     */
    public void setState(@NotNull String value) {
        set(2, value);
    }

    /**
     * Getter for <code>CHAT.STATE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getState() {
        return (String) get(2);
    }

    /**
     * Setter for <code>CHAT.CREATED_AT</code>.
     */
    public void setCreatedAt(@NotNull OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>CHAT.CREATED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row4<Long, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row4<Long, String, String, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Chat.CHAT.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Chat.CHAT.NAME;
    }

    @Override
    @NotNull
    public Field<String> field3() {
        return Chat.CHAT.STATE;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Chat.CHAT.CREATED_AT;
    }

    @Override
    @NotNull
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getName();
    }

    @Override
    @NotNull
    public String component3() {
        return getState();
    }

    @Override
    @NotNull
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    @NotNull
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getName();
    }

    @Override
    @NotNull
    public String value3() {
        return getState();
    }

    @Override
    @NotNull
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    @NotNull
    public ChatRecord value1(@NotNull Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public ChatRecord value2(@NotNull String value) {
        setName(value);
        return this;
    }

    @Override
    @NotNull
    public ChatRecord value3(@NotNull String value) {
        setState(value);
        return this;
    }

    @Override
    @NotNull
    public ChatRecord value4(@NotNull OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public ChatRecord values(@NotNull Long value1, @NotNull String value2, @NotNull String value3, @NotNull OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChatRecord
     */
    public ChatRecord() {
        super(Chat.CHAT);
    }

    /**
     * Create a detached, initialised ChatRecord
     */
    @ConstructorProperties({ "id", "name", "state", "createdAt" })
    public ChatRecord(@NotNull Long id, @NotNull String name, @NotNull String state, @NotNull OffsetDateTime createdAt) {
        super(Chat.CHAT);

        setId(id);
        setName(name);
        setState(state);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ChatRecord
     */
    public ChatRecord(edu.java.scrapper.domain.jooq.generated.tables.pojos.Chat value) {
        super(Chat.CHAT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setState(value.getState());
            setCreatedAt(value.getCreatedAt());
            resetChangedOnNotNull();
        }
    }
}
